date and time = 27/12/2022 11:28:31 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/team3_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/team3_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Previous edits: 
from: ['Eggs, Fried (2)', 'Eggs Fried (2)', 'Fried Eggs (2)', '(2) Eggs Fried', '(2) Fried Eggs', 'Eggs (2) Fried', 'Eggs (2), Fried', 'Eggs - Fried (2)', 'Eggs, (2) Fried', 'Eggs, 2 Fried', 'Eggs, Fried 2', 'Eggs, Fried [2]', 'Eggs: Fried (2)', 'Fried (2 Eggs)', 'Fried 2 [eggs]', 'Fried Eggs (2 Eggs)', 'Fried Eggs 2', 'Fried Eggs, (2)', 'Fried Eggs, 2', '[2] Fried Eggs'] >>> 
 to: ['Fried Eggs, Two'] 
Current edits that use previous outputs: 
Current from: ['Fried Eggs, Two', 'Two Fried Eggs', 'Eggs, Fried, Two', 'Two Eggs Fried', 'Two Eggs, Fried', 'Eggs Fried, Two', 'Eggs, Fried (two)', 'Fried Eggs (two)', 'Fried, Two Eggs', 'Eggs Fried (two)', 'Eggs, Fried Two', 'Eggs, Two Fried', 'Eggs, Two, Fried', 'Eggs- Fried Two', 'Eggs: Fried, Two', 'Eggs: Two, Fried', 'Fried Eggs Two', 'Fried Two Eggs', 'Fried [eggs], Two', 'Two Eggs: Fried'] >>> 
 to: Fried Eggs, Two 
Merge step 2: Remove sub-edits that is contained by super-edits in the list 
Example: {from:a, to:b}, {from: [a,b], to:c} >>> {from:[a,b], to:c} 
The number of edits that require to be merged: 1
Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 29528 
After merging, the number of edits is 29527 
Step 4: Enable Provenance with Mass-edits >>> 
 Start OpenRefine with Project id >>> 2548411792946 
Save Recipe Embeded with Provenance to >>> prov_save_recipe/team3_prov.json 
date and time = 05/01/2023 17:40:00 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 
date and time = 05/01/2023 17:44:27 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:45:06 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:46:13 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:47:39 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:50:01 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:51:13 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:52:27 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:53:42 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Previous edits: 
from: ['c', 'a'] >>> 
 to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> 
 to: f 
Merge step 2: Remove sub-edits that is contained by super-edits in the list 
Example: {from:a, to:b}, {from: [a,b], to:c} >>> {from:[a,b], to:c} 
The number of edits that require to be merged: 1
Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 17:54:32 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Previous edits: 
from: ['c', 'a'] >>> 
 to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> 
 to: f 
Merge step 2: Remove sub-edits that is contained by super-edits in the list 
Example: {from:a, to:b}, {from: [a,b], to:c} >>> {from:[a,b], to:c} 
The number of edits that require to be merged: 1
Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 05/01/2023 18:07:10 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 

Previous edits: 
from: ['a', 'c'] >>> 
 to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> 
 to: f 
Merge step 2: Remove sub-edits that is contained by super-edits in the list 
Example: {from:a, to:b}, {from: [a,b], to:c} >>> {from:[a,b], to:c} 
The number of edits that require to be merged: 1
Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 10/01/2023 12:37:13 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 
Deduplication process >>>>>>>
date and time = 10/01/2023 12:42:54 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
Deduplication process >>>>>>>
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>> 

Previous edits: 
from: ['a', 'c'] >>> 
 to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> 
 to: f 
date and time = 10/01/2023 12:59:06 

Step 1: Load Recipe and Save its Metadata to >>> workflow-analysis/temp_v1_metadata.csv 

Step 2: Summarize Mass-edits >>> Apply Net Effect to Merge Edits 
Save Merged Recipe to >>> prepared_recipe/temp_v1_prepared.json 
Merge step 1: output of previous edits overlap with input of current edits 
Example: {from: a, to:b}, {from:b, to:c} >>> {from:a, to:b}, {from: [a,b], to:c} 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
Deduplication process >>>>>>>
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'a', 'c'}) is refined as frozenset({'a', 'c', 'b'})
The number of edits that require to be merged: 1
Step 3: Compare number of edits From Original Recipe and Merged Recipe: 
Before merging,the total number of edits is 5 
date and time = 15/01/2023 15:12:36 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh.json 
Deduplication process >>>>>>>
date and time = 15/01/2023 15:21:55 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh-version1.json 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'c', 'a'}) is refined as frozenset({'a', 'c', 'b'})
The number of edits that require to be merged: 1Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/dish-oh/temp-oh-version1.json_prepared 
date and time = 15/01/2023 15:23:29 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh-version1.json 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'c', 'a'}) is refined as frozenset({'b', 'c', 'a'})
The number of edits that require to be merged: 1Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp-oh-version1.json_prepared 
Load Original Recipe >>>>> dish-oh/temp_p1-oh.json 
Deduplication process >>>>>>>
Refinement Process >>>>>>> 

Previous edits: 
from: ['b'] >>> to: ['a'] 
Current edits that use previous outputs: 
Current from: ['a'] >>> to: c 

Previous edits: 
from: ['a', 'b'] >>> to: ['c'] 
Current edits that use previous outputs: 
Current from: ['c'] >>> to: f 
frozenset({'b'}) is refined as frozenset({'b', 'a'})
frozenset({'b'}) is refined as frozenset({'b', 'c', 'a'})
frozenset({'b', 'a'}) is refined as frozenset({'b', 'c', 'a'})
The number of edits that require to be merged: 2Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp_p1-oh.json_prepared 

Step 3: Recipe Merge Scheduler >>>>> 

Step 4: Parallel Composition >>>>> 
date and time = 15/01/2023 15:26:14 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh-version1.json 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'c', 'a'}) is refined as frozenset({'c', 'b', 'a'})
The number of edits that require to be merged: 1Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp-oh-version1_prepared.json 
Load Original Recipe >>>>> dish-oh/temp_p1-oh.json 
Deduplication process >>>>>>>
Refinement Process >>>>>>> 

Previous edits: 
from: ['b'] >>> to: ['a'] 
Current edits that use previous outputs: 
Current from: ['a'] >>> to: c 

Previous edits: 
from: ['a', 'b'] >>> to: ['c'] 
Current edits that use previous outputs: 
Current from: ['c'] >>> to: f 
frozenset({'b'}) is refined as frozenset({'b', 'a'})
frozenset({'b'}) is refined as frozenset({'c', 'b', 'a'})
frozenset({'b', 'a'}) is refined as frozenset({'c', 'b', 'a'})
The number of edits that require to be merged: 2Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp_p1-oh_prepared.json 

Step 3: Recipe Merge Scheduler >>>>> 

Step 4: Parallel Composition >>>>> 
date and time = 15/01/2023 15:30:44 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh-version1.json 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'a', 'c'}) is refined as frozenset({'b', 'a', 'c'})
The number of edits that require to be merged: 1Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp-oh-version1_prepared.json 
Load Original Recipe >>>>> dish-oh/temp_p1-oh.json 
Deduplication process >>>>>>>
Refinement Process >>>>>>> 

Previous edits: 
from: ['b'] >>> to: ['a'] 
Current edits that use previous outputs: 
Current from: ['a'] >>> to: c 

Previous edits: 
from: ['a', 'b'] >>> to: ['c'] 
Current edits that use previous outputs: 
Current from: ['c'] >>> to: f 
frozenset({'b'}) is refined as frozenset({'a', 'b'})
frozenset({'b'}) is refined as frozenset({'a', 'b', 'c'})
frozenset({'a', 'b'}) is refined as frozenset({'a', 'b', 'c'})
The number of edits that require to be merged: 2Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp_p1-oh_prepared.json 

Step 3: Recipe Merge Scheduler >>>>> 

Step 4: Parallel Composition >>>>> 
date and time = 15/01/2023 15:33:10 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh-version1.json 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'a', 'c'}) is refined as frozenset({'a', 'b', 'c'})
The number of edits that require to be merged: 1Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp-oh-version1_prepared.json 
Load Original Recipe >>>>> dish-oh/temp_p1-oh.json 
Deduplication process >>>>>>>
Refinement Process >>>>>>> 

Previous edits: 
from: ['b'] >>> to: ['a'] 
Current edits that use previous outputs: 
Current from: ['a'] >>> to: c 

Previous edits: 
from: ['a', 'b'] >>> to: ['c'] 
Current edits that use previous outputs: 
Current from: ['c'] >>> to: f 
frozenset({'b'}) is refined as frozenset({'a', 'b'})
frozenset({'b'}) is refined as frozenset({'b', 'a', 'c'})
frozenset({'a', 'b'}) is refined as frozenset({'b', 'a', 'c'})
The number of edits that require to be merged: 2Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp_p1-oh_prepared.json 

Step 3: Recipe Merge Scheduler >>>>> 

Step 4: Parallel Composition >>>>> 
date and time = 15/01/2023 15:33:57 

Step 1: Load Recipes and Save Metadata to >>>>> workflow-analysis/temp_metadata.csv 

Step 2: Sequential Composition >>>>> 
Load Original Recipe >>>>> dish-oh/temp-oh-version1.json 
Deduplication process >>>>>>>
['a']:b and ['c']:b are merged 
['g', 'e']:e and ['h']:e are merged 
Refinement Process >>>>>>> 

Previous edits: 
from: ['a', 'c'] >>> to: ['b'] 
Current edits that use previous outputs: 
Current from: ['b'] >>> to: f 
frozenset({'c', 'a'}) is refined as frozenset({'c', 'b', 'a'})
The number of edits that require to be merged: 1Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp-oh-version1_prepared.json 
Load Original Recipe >>>>> dish-oh/temp_p1-oh.json 
Deduplication process >>>>>>>
Refinement Process >>>>>>> 

Previous edits: 
from: ['b'] >>> to: ['a'] 
Current edits that use previous outputs: 
Current from: ['a'] >>> to: c 

Previous edits: 
from: ['a', 'b'] >>> to: ['c'] 
Current edits that use previous outputs: 
Current from: ['c'] >>> to: f 
frozenset({'b'}) is refined as frozenset({'b', 'a'})
frozenset({'b'}) is refined as frozenset({'c', 'a', 'b'})
frozenset({'b', 'a'}) is refined as frozenset({'c', 'a', 'b'})
The number of edits that require to be merged: 2Prepare Recipe By Sequantial Composition and Save it To >>> prepared_recipe/temp_p1-oh_prepared.json 

Step 3: Recipe Merge Scheduler >>>>> 

Step 4: Parallel Composition >>>>> 
